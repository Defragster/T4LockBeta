/*
  (c) Frank B, 2020
  License: MIT
  Please keep this info.
*/

inline
unsigned memfree(void) {
  extern unsigned long _ebss;
  extern unsigned long _sdata;
  extern unsigned long _estack;
  const unsigned DTCM_START = 0x20000000UL;
  unsigned dtcm = (unsigned)&_estack - DTCM_START;
  unsigned stackinuse = (unsigned) &_estack -  (unsigned) __builtin_frame_address(0);
  unsigned varsinuse = (unsigned)&_ebss - (unsigned)&_sdata;
  unsigned freemem = dtcm - (stackinuse + varsinuse);
  return freemem;
}

extern "C" {
  void startup_late_hook(void) {
    extern unsigned long _ebss;
    unsigned long * p =  &_ebss;
    size_t size = (size_t)(uint8_t*)__builtin_frame_address(0) - 32 - (uintptr_t) &_ebss;
    memset((void*)p, 0, size);
  }
}

unsigned long maxstack() {
  extern unsigned long _ebss;
  extern unsigned long _estack;
  unsigned long * p =  &_ebss;
  while (*p == 0) p++;
  return (unsigned) &_estack - (unsigned) p;
}

FLASHMEM
void flexRamInfo(void) {

#if defined(__IMXRT1062__)
  const unsigned DTCM_START = 0x20000000UL;
  const unsigned OCRAM_START = 0x20200000UL;
  const unsigned OCRAM_SIZE = 512;
  const unsigned FLASH_SIZE = 2048;
#endif

  Serial.println(__FILE__ " " __DATE__ " " __TIME__ );
  Serial.print("Teensyduino version ");
  Serial.println(TEENSYDUINO / 100.0f);
  Serial.println();

  int itcm = 0;
  int dtcm = 0;
  int ocram = 0;
  uint32_t gpr17 = IOMUXC_GPR_GPR17;

  char __attribute__((unused)) dispstr[17] = {0};
  dispstr[16] = 0;

  for (int i = 15; i >= 0; i--) {
    switch ((gpr17 >> (i * 2)) & 0b11) {
    default: dispstr[15 - i] = '.'; break;
    case 0b01: dispstr[15 - i] = 'O'; ocram++; break;
    case 0b10: dispstr[15 - i] = 'D'; dtcm++; break;
    case 0b11: dispstr[15 - i] = 'I'; itcm++; break;
    }
  }

  Serial.printf("ITCM: %dkB, DTCM: %dkB, OCRAM: %d(+%d)kB [%s]\n", itcm * 32, dtcm * 32, ocram * 32, OCRAM_SIZE, dispstr);
  const char* fmtstr = "%-6s%7d %5.02f%% of %4dkB (%7d Bytes free) %s\n";

  extern unsigned long _stext;
  extern unsigned long _etext;
  extern unsigned long _sdata;
  extern unsigned long _ebss;
  extern unsigned long _flashimagelen;
  extern unsigned long _heap_start;
  extern unsigned long _estack;

  Serial.printf(fmtstr, "ITCM:",
                (unsigned)&_etext - (unsigned)&_stext,
                (float)((unsigned)&_etext - (unsigned)&_stext) / ((float)itcm * 32768.0f) * 100.0f,
                itcm * 32,
                itcm * 32768 - ((unsigned)&_etext - (unsigned)&_stext), "(RAM1) FASTRUN");

  Serial.printf(fmtstr, "OCRAM:",
                (unsigned)&_heap_start - OCRAM_START,
                (float)((unsigned)&_heap_start - OCRAM_START) / (OCRAM_SIZE * 1024.0f) * 100.0f,
                OCRAM_SIZE,
                OCRAM_SIZE * 1024 - ((unsigned)&_heap_start - OCRAM_START), "(RAM2) DMAMEM");

  Serial.printf(fmtstr, "FLASH:",
                (unsigned)&_flashimagelen,
                ((unsigned)&_flashimagelen) / (FLASH_SIZE * 1024.0f) * 100.0f,
                FLASH_SIZE,
                FLASH_SIZE * 1024 - ((unsigned)&_flashimagelen), "FLASHMEM, PROGMEM");

  // Serial.println();
  unsigned _dtcm = (unsigned)&_estack - DTCM_START; //or, one could use dtcm * 32768 here.
  unsigned stackinuse = (unsigned) &_estack -  (unsigned) __builtin_frame_address(0);
  unsigned varsinuse = (unsigned)&_ebss - (unsigned)&_sdata;

  Serial.printf("DTCM:\n  %7d Bytes (%d kB)\n", _dtcm, _dtcm / 1024);
  Serial.printf("- %7d Bytes (%d kB) global variables\n", varsinuse, varsinuse / 1024);
  Serial.printf("- %7d Bytes (%d kB) stack (currently)\n", stackinuse, stackinuse / 1024);
  Serial.println("=========");
  Serial.printf("  %7d Bytes free (%d kB), %d Bytes in use (%d kB).\n",
                _dtcm - (varsinuse + stackinuse), (_dtcm - (varsinuse + stackinuse)) / 1024,
                varsinuse + stackinuse, (varsinuse + stackinuse) / 1024
               );
}

#if defined(__IMXRT1062__) // Get Pointer to FREE ITCM
uint32_t *ptrFreeITCM;  // Set to Usable ITCM free RAM
uint32_t  sizeofFreeITCM; // sizeof free RAM in uint32_t units.
uint32_t  SizeLeft_etext;
FLASHMEM
void   getFreeITCM() { // end of CODE ITCM, skip full 32 bits
  extern unsigned long _stext;
  extern unsigned long _etext;
  SizeLeft_etext = (32 * 1024) - (((uint32_t)&_etext - (uint32_t)&_stext) % (32 * 1024));
  sizeofFreeITCM = SizeLeft_etext - 4;
  sizeofFreeITCM /= sizeof(ptrFreeITCM[0]);
  ptrFreeITCM = (uint32_t *) ( (uint32_t)&_stext + (uint32_t)&_etext + 4 );
  Serial.printf( "Size of Free ITCM in Bytes = %u\n", sizeofFreeITCM * sizeof(ptrFreeITCM[0]) );
  Serial.printf( "Start of Free ITCM = %u [%X] \n", ptrFreeITCM, ptrFreeITCM);
  Serial.printf( "End of Free ITCM = %u [%X] \n", ptrFreeITCM + sizeofFreeITCM, ptrFreeITCM + sizeofFreeITCM);
}
#else
void   getFreeITCM() {}
#endif
//DMAMEM byte fill[9000]; // ((used))
void setup() {
  extern unsigned long _heap_start;
  extern char _heap_end;

  while (!Serial && millis() < 4000);
  if (CrashReport)   Serial.print(CrashReport);
  flexRamInfo();
  Serial.print("memfree()=");
  Serial.println(memfree());
  Serial.print("maxstack()=");
  Serial.println(maxstack());
  Serial.println("\n\n++++++++++++++++++++++");
  Serial.println("\n =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
  unsigned long * p =  (unsigned long *)malloc(4000);
  Serial.printf("setup HEAP: alloc *p=%X\n", (unsigned) p);
  Serial.printf("ss HEAP: diff =%d\n", (unsigned) p - (unsigned)&_heap_start);
  currheap( 4 );
  Serial.println("\n =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
  unsigned long * p2 =  (unsigned long *)malloc(8000);
  Serial.printf("setup HEAP: alloc *p2=%X\n", (unsigned) p2);
  Serial.printf("ss HEAP: diff =%d\n", (unsigned) p2 - (unsigned)&_heap_start);
  currheap( 2000 );
  free(p);
  free(p2);

  Serial.println("\n\n++++++++++++++++++++++");
  getFreeITCM();
}

void loop() {
}

unsigned long currheap( int tSize) {
  extern unsigned long _heap_start;
  extern char _heap_end;
  unsigned long * p =  (unsigned long *)malloc(0);

  Serial.printf("HEAP: start *=%X\n", (unsigned)&_heap_start);
  Serial.printf("HEAP: end *=%X\n", (unsigned)&_heap_end);
  Serial.printf("HEAP SIZE: %d\t%X", (unsigned)&_heap_start - (unsigned) _heap_end, (unsigned)&_heap_start - (unsigned) _heap_end);
  Serial.printf("HEAP: alloc *=%X\n", (unsigned) p);
  Serial.printf("HEAP: diff =%d\n", (unsigned) p - (unsigned)&_heap_start);
  free(p);
  return (unsigned) p - (unsigned)&_heap_start;
}
